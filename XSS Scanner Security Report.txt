1.We did two rounds of scanning. Why the results are different? What is the purpose of adding in the session id?

When the test was originally run without the session id, the scan showed no XSS vulnerabilities but only had access to 4 sections of the website. When the session id was added, the XSS scan again found no vulnerabilities but scanned through 3 additional sections of the website that weren't accessible to pawnXSS before a user token was created. The reason for this is because when a user is created, the session id cookie is stored by the browser and gives the user access to all the additional features of the page that are unlocked to a registered user of the website like user information and product pages that weren't accessible before a user was created. In other words, by adding a session id, we give the pwnXSS scanner access to all the pages a logged in user would have access to which in turn gives the scanner more opportunities to find vulnerabilities.

2.Are all the possible XSS (script injection) links/routes covered in the table above? (think about any links that will render user inputs, such as URL paramer, cookies, flask flash calls). If not, are those link/pages vulnerable to XSS?

The table using pwnXSS covers scans for all basic XSS vulnerabilities that exist in the major possible places for script injection, so they do an adequate job at scanning vulnerabilities. This shows that Qbay is generally not vulnerable probably due to the reason it is running on a safe app library like flask that limits an attacker’s ability to crosshead script the site. Additionally, flask flash cell vulnerabilities don't exist for our website as proper error handling of incompatible inputs is present throughout the input fields on the site. That being said, there may be more powerful scanners that can test for vulnerabilities in all of the input fields and potentially find a way to bypass some restrictions resulting in a vulnerable input field. In conclusion, no, none of the link/pages on Qbay are vulnerable to XSS in its current state due to a stable app library, proper input requirements and error handling that are in place even when the scanner has access to a user’s session id cookie.